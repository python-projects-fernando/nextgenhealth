# src/user_management/application/use_cases/register_patient_profile/register_patient_profile_command.py

from datetime import datetime
from uuid import UUID
from pydantic import BaseModel, Field, field_validator

from user_management.domain.specifications.patient_profile import (
    ValidEmergencyContactNameSpecification,
    ValidEmergencyContactPhoneSpecification,
    ValidInsuranceInfoSpecification,
    ValidPreferredLanguageSpecification,
    ValidMedicalHistorySummarySpecification,
)
from user_management.domain.exceptions import (
    InvalidPatientProfileEmergencyContactNameError,
    InvalidPatientProfileEmergencyContactPhoneError,
    InvalidPatientProfileInsuranceInfoError,
    InvalidPatientProfilePreferredLanguageError,
    InvalidPatientProfileMedicalHistorySummaryError,
)


class RegisterPatientProfileCommand(BaseModel):
    """
    Data Transfer Object for patient profile registration.

    Contains all required data to create a PatientProfile entity.
    Validated automatically by Pydantic using domain specifications.
    Timestamps (created_at, updated_at) are generated by the system.
    """

    user_uuid: UUID = Field(..., description="UUID of the associated User entity (must already exist).")
    emergency_contact_name: str = Field(..., description="Full name of the emergency contact.")
    emergency_contact_phone: str = Field(..., description="Emergency contact phone in E.164 format.")
    insurance_info: str = Field(..., description="Name of the insurance provider.")
    preferred_language: str = Field(..., description="Preferred language in BCP 47 format (e.g., 'pt-BR').")
    medical_history_summary: str = Field(..., description="Brief, plain-text medical history summary.")

    @field_validator('emergency_contact_name')
    @classmethod
    def validate_emergency_contact_name(cls, v: str) -> str:
        if not ValidEmergencyContactNameSpecification().is_satisfied_by(v):
            raise InvalidPatientProfileEmergencyContactNameError(f"Invalid emergency contact name: {v}")
        return v

    @field_validator('emergency_contact_phone')
    @classmethod
    def validate_emergency_contact_phone(cls, v: str) -> str:
        if not ValidEmergencyContactPhoneSpecification().is_satisfied_by(v):
            raise InvalidPatientProfileEmergencyContactPhoneError(f"Invalid emergency contact phone: {v}")
        return v

    @field_validator('insurance_info')
    @classmethod
    def validate_insurance_info(cls, v: str) -> str:
        if not ValidInsuranceInfoSpecification().is_satisfied_by(v):
            raise InvalidPatientProfileInsuranceInfoError(f"Invalid insurance info: {v}")
        return v

    @field_validator('preferred_language')
    @classmethod
    def validate_preferred_language(cls, v: str) -> str:
        if not ValidPreferredLanguageSpecification().is_satisfied_by(v):
            raise InvalidPatientProfilePreferredLanguageError(f"Invalid preferred language: {v}")
        return v

    @field_validator('medical_history_summary')
    @classmethod
    def validate_medical_history_summary(cls, v: str) -> str:
        if not ValidMedicalHistorySummarySpecification().is_satisfied_by(v):
            raise InvalidPatientProfileMedicalHistorySummaryError(f"Invalid medical history summary: {v}")
        return v

    class Config:
        from_attributes = True
        json_encoders = {
            datetime: lambda v: v.isoformat(),
        }