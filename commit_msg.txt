feat(api): implement API layer with PostgreSQL integration and FindUser use case

- Added Presentation Layer (FastAPI):
  - Created main application entry point (src/api/main.py)
  - Defined user routes (POST /users, GET /users/{email}) in src/api/routes/user_routes.py
  - Set up dependency injection for repositories via src/api/dependencies.py
  - Added package markers (__init__.py) for API modules

- Enhanced Application Layer:
  - Implemented FindUserByEmailUseCase and its Command
  - Refactored RegisterUserUseCase for async/await compatibility
  - Updated repository interface (UserRepository) to support async operations

- Implemented Infrastructure Layer - Database:
  - Defined ORM models (UserModel, UserCredentialsModel) using SQLAlchemy
  - Created PostgresUserRepository implementing UserRepository interface
  - Included async session management for database interactions
  - Ensured User and UserCredentials are persisted atomically via the repository

- Updated Domain and Factories:
  - Minor updates to UserRole and UserStatus enums
  - Adjusted UserFactory for new domain requirements

- Improved Project Configuration:
  - Added necessary dependencies to requirements.txt (fastapi, sqlalchemy, asyncpg, etc.)
  - Ensured project structure supports both in-memory and PostgreSQL repositories

This establishes the core API endpoints and connects them to a persistent database backend,
enabling user registration and retrieval flows with a robust, asynchronous architecture.