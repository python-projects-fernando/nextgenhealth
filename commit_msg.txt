feat(user): implement UserCredentials VO and profile update functionality

- Introduced UserCredentials Value Object to securely handle password hashing and validation
  - Immutable design using @dataclass(frozen=True)
  - Encapsulates hash logic and prevents direct password exposure
- Added test suite for password validation:
  - Covers correct/incorrect passwords, edge cases
  - Ensures domain security rules are enforced
- Implemented change_password method on User:
  - Validates current password before allowing change
  - Updates updated_at timestamp
- Added update_basic_profile method to safely edit user information:
  - Supports first_name, last_name, email, phone, date_of_birth
  - Uses Specification Pattern for field validation
- Added test_user_update_basic_profile_validation.py
- Created new test suite for UserCredentials validation
- Updated create_valid_user factory to support credential injection
- Enhanced User entity with behavior-driven methods aligned with DDD principles

All changes follow TDD: RED → GREEN → REFACTOR cycle.

Improves domain encapsulation, auditability, and compliance readiness (HIPAA/GDPR).