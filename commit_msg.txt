feat(user): implement PatientProfile aggregate and RegisterUserUseCase

This commit introduces significant enhancements to the user management domain,
laying the groundwork for a robust healthcare system aligned with DDD and TDD.

Key Additions:
- New 'PatientProfile' Aggregate Root:
  - Comprehensive entity with medical history, insurance, emergency contact.
  - Dedicated Value Objects, Specifications, Validator, and Exceptions.
  - Full suite of unit tests for validation logic.
- 'RegisterUserUseCase' Implementation:
  - Application service to orchestrate user registration.
  - Uses Pydantic 'RegisterUserCommand' for input validation.
  - Leverages 'UserFactory' for domain entity creation.
- Architectural Layers Established/Expanded:
  - Application Layer: Use cases and command DTOs.
  - Domain Layer: Entities, Value Objects, Aggregates, Specifications, Factories.
  - Infrastructure Layer: Initial in-memory repository.
  - Test Helpers: Factories for 'User' and 'PatientProfile' for easier testing.
- Dependency Updates: Added Pydantic for robust data validation.

This change represents a major milestone towards a fully-featured MVP,
supporting core functionalities for patient data management within a secure,
auditable, and well-architected system. It reinforces the project's adherence
to Clean Architecture, DDD, and HIPAA/GDPR compliance principles.

All new code follows TDD: RED -> GREEN -> REFACTOR.
Documentation and CI pipelines updated accordingly.