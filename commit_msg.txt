feat(user): implement Specification Pattern for User entity validation

- Introduced domain specifications for all User fields:
  - ValidUUIDSpecification
  - ValidEmailSpecification
  - ValidNameSpecification
  - ValidPhoneE164Specification
  - ValidDateOfBirthSpecification
  - ValidUserRoleSpecification
  - ValidUserStatusSpecification
  - ValidCreatedAtSpecification
  - ValidUpdatedAtSpecification
- Renamed specification files for consistency: `{field}.py` â†’ `{field}_is_valid.py`
- Organized public API via __init__.py for clean imports
- Updated User entity to use specifications instead of inline if-statements
- Enhanced test suite:
  - Improved docstrings and clarity in timestamp and role/status validation tests
  - Ensured factory defaults are valid and consistent
- Refactored UserValidator to delegate to specifications
- Updated helpers and exception hierarchy for better domain integrity

This change improves code maintainability, aligns with DDD principles, and enables future composition of rules (e.g., AND/OR).

Supports auditability, compliance (HIPAA/GDPR), and long-term scalability.